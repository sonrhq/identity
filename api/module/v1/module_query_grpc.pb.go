// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package modulev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ModuleQueryServiceClient is the client API for ModuleQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModuleQueryServiceClient interface {
	// Get queries the Account table by its primary key.
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error)
	// ListAccount queries the Account table using prefix and range queries against defined indexes.
	ListAccount(ctx context.Context, in *ListAccountRequest, opts ...grpc.CallOption) (*ListAccountResponse, error)
	// Get queries the Identity table by its primary key.
	GetIdentity(ctx context.Context, in *GetIdentityRequest, opts ...grpc.CallOption) (*GetIdentityResponse, error)
	// ListIdentity queries the Identity table using prefix and range queries against defined indexes.
	ListIdentity(ctx context.Context, in *ListIdentityRequest, opts ...grpc.CallOption) (*ListIdentityResponse, error)
}

type moduleQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModuleQueryServiceClient(cc grpc.ClientConnInterface) ModuleQueryServiceClient {
	return &moduleQueryServiceClient{cc}
}

func (c *moduleQueryServiceClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error) {
	out := new(GetAccountResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.identity.module.v1.ModuleQueryService/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleQueryServiceClient) ListAccount(ctx context.Context, in *ListAccountRequest, opts ...grpc.CallOption) (*ListAccountResponse, error) {
	out := new(ListAccountResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.identity.module.v1.ModuleQueryService/ListAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleQueryServiceClient) GetIdentity(ctx context.Context, in *GetIdentityRequest, opts ...grpc.CallOption) (*GetIdentityResponse, error) {
	out := new(GetIdentityResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.identity.module.v1.ModuleQueryService/GetIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleQueryServiceClient) ListIdentity(ctx context.Context, in *ListIdentityRequest, opts ...grpc.CallOption) (*ListIdentityResponse, error) {
	out := new(ListIdentityResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.identity.module.v1.ModuleQueryService/ListIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModuleQueryServiceServer is the server API for ModuleQueryService service.
// All implementations must embed UnimplementedModuleQueryServiceServer
// for forward compatibility
type ModuleQueryServiceServer interface {
	// Get queries the Account table by its primary key.
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error)
	// ListAccount queries the Account table using prefix and range queries against defined indexes.
	ListAccount(context.Context, *ListAccountRequest) (*ListAccountResponse, error)
	// Get queries the Identity table by its primary key.
	GetIdentity(context.Context, *GetIdentityRequest) (*GetIdentityResponse, error)
	// ListIdentity queries the Identity table using prefix and range queries against defined indexes.
	ListIdentity(context.Context, *ListIdentityRequest) (*ListIdentityResponse, error)
	mustEmbedUnimplementedModuleQueryServiceServer()
}

// UnimplementedModuleQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedModuleQueryServiceServer struct {
}

func (UnimplementedModuleQueryServiceServer) GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedModuleQueryServiceServer) ListAccount(context.Context, *ListAccountRequest) (*ListAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccount not implemented")
}
func (UnimplementedModuleQueryServiceServer) GetIdentity(context.Context, *GetIdentityRequest) (*GetIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentity not implemented")
}
func (UnimplementedModuleQueryServiceServer) ListIdentity(context.Context, *ListIdentityRequest) (*ListIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIdentity not implemented")
}
func (UnimplementedModuleQueryServiceServer) mustEmbedUnimplementedModuleQueryServiceServer() {}

// UnsafeModuleQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModuleQueryServiceServer will
// result in compilation errors.
type UnsafeModuleQueryServiceServer interface {
	mustEmbedUnimplementedModuleQueryServiceServer()
}

func RegisterModuleQueryServiceServer(s grpc.ServiceRegistrar, srv ModuleQueryServiceServer) {
	s.RegisterService(&ModuleQueryService_ServiceDesc, srv)
}

func _ModuleQueryService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleQueryServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.identity.module.v1.ModuleQueryService/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleQueryServiceServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleQueryService_ListAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleQueryServiceServer).ListAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.identity.module.v1.ModuleQueryService/ListAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleQueryServiceServer).ListAccount(ctx, req.(*ListAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleQueryService_GetIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleQueryServiceServer).GetIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.identity.module.v1.ModuleQueryService/GetIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleQueryServiceServer).GetIdentity(ctx, req.(*GetIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleQueryService_ListIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleQueryServiceServer).ListIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.identity.module.v1.ModuleQueryService/ListIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleQueryServiceServer).ListIdentity(ctx, req.(*ListIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ModuleQueryService_ServiceDesc is the grpc.ServiceDesc for ModuleQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModuleQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sonrhq.identity.module.v1.ModuleQueryService",
	HandlerType: (*ModuleQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccount",
			Handler:    _ModuleQueryService_GetAccount_Handler,
		},
		{
			MethodName: "ListAccount",
			Handler:    _ModuleQueryService_ListAccount_Handler,
		},
		{
			MethodName: "GetIdentity",
			Handler:    _ModuleQueryService_GetIdentity_Handler,
		},
		{
			MethodName: "ListIdentity",
			Handler:    _ModuleQueryService_ListIdentity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sonrhq/identity/module/v1/module_query.proto",
}
