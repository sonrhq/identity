// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package modulev1

import (
	context "context"
	ormlist "cosmossdk.io/orm/model/ormlist"
	ormtable "cosmossdk.io/orm/model/ormtable"
	ormerrors "cosmossdk.io/orm/types/ormerrors"
)

type AccountTable interface {
	Insert(ctx context.Context, account *Account) error
	InsertReturningIndex(ctx context.Context, account *Account) (uint64, error)
	LastInsertedSequence(ctx context.Context) (uint64, error)
	Update(ctx context.Context, account *Account) error
	Save(ctx context.Context, account *Account) error
	Delete(ctx context.Context, account *Account) error
	Has(ctx context.Context, index uint64) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, index uint64) (*Account, error)
	HasByAddress(ctx context.Context, address string) (found bool, err error)
	// GetByAddress returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	GetByAddress(ctx context.Context, address string) (*Account, error)
	HasByPublicKey(ctx context.Context, public_key []byte) (found bool, err error)
	// GetByPublicKey returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	GetByPublicKey(ctx context.Context, public_key []byte) (*Account, error)
	List(ctx context.Context, prefixKey AccountIndexKey, opts ...ormlist.Option) (AccountIterator, error)
	ListRange(ctx context.Context, from, to AccountIndexKey, opts ...ormlist.Option) (AccountIterator, error)
	DeleteBy(ctx context.Context, prefixKey AccountIndexKey) error
	DeleteRange(ctx context.Context, from, to AccountIndexKey) error

	doNotImplement()
}

type AccountIterator struct {
	ormtable.Iterator
}

func (i AccountIterator) Value() (*Account, error) {
	var account Account
	err := i.UnmarshalMessage(&account)
	return &account, err
}

type AccountIndexKey interface {
	id() uint32
	values() []interface{}
	accountIndexKey()
}

// primary key starting index..
type AccountPrimaryKey = AccountIndexIndexKey

type AccountIndexIndexKey struct {
	vs []interface{}
}

func (x AccountIndexIndexKey) id() uint32            { return 0 }
func (x AccountIndexIndexKey) values() []interface{} { return x.vs }
func (x AccountIndexIndexKey) accountIndexKey()      {}

func (this AccountIndexIndexKey) WithIndex(index uint64) AccountIndexIndexKey {
	this.vs = []interface{}{index}
	return this
}

type AccountAddressIndexKey struct {
	vs []interface{}
}

func (x AccountAddressIndexKey) id() uint32            { return 1 }
func (x AccountAddressIndexKey) values() []interface{} { return x.vs }
func (x AccountAddressIndexKey) accountIndexKey()      {}

func (this AccountAddressIndexKey) WithAddress(address string) AccountAddressIndexKey {
	this.vs = []interface{}{address}
	return this
}

type AccountPublicKeyIndexKey struct {
	vs []interface{}
}

func (x AccountPublicKeyIndexKey) id() uint32            { return 2 }
func (x AccountPublicKeyIndexKey) values() []interface{} { return x.vs }
func (x AccountPublicKeyIndexKey) accountIndexKey()      {}

func (this AccountPublicKeyIndexKey) WithPublicKey(public_key []byte) AccountPublicKeyIndexKey {
	this.vs = []interface{}{public_key}
	return this
}

type accountTable struct {
	table ormtable.AutoIncrementTable
}

func (this accountTable) Insert(ctx context.Context, account *Account) error {
	return this.table.Insert(ctx, account)
}

func (this accountTable) Update(ctx context.Context, account *Account) error {
	return this.table.Update(ctx, account)
}

func (this accountTable) Save(ctx context.Context, account *Account) error {
	return this.table.Save(ctx, account)
}

func (this accountTable) Delete(ctx context.Context, account *Account) error {
	return this.table.Delete(ctx, account)
}

func (this accountTable) InsertReturningIndex(ctx context.Context, account *Account) (uint64, error) {
	return this.table.InsertReturningPKey(ctx, account)
}

func (this accountTable) LastInsertedSequence(ctx context.Context) (uint64, error) {
	return this.table.LastInsertedSequence(ctx)
}

func (this accountTable) Has(ctx context.Context, index uint64) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, index)
}

func (this accountTable) Get(ctx context.Context, index uint64) (*Account, error) {
	var account Account
	found, err := this.table.PrimaryKey().Get(ctx, &account, index)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &account, nil
}

func (this accountTable) HasByAddress(ctx context.Context, address string) (found bool, err error) {
	return this.table.GetIndexByID(1).(ormtable.UniqueIndex).Has(ctx,
		address,
	)
}

func (this accountTable) GetByAddress(ctx context.Context, address string) (*Account, error) {
	var account Account
	found, err := this.table.GetIndexByID(1).(ormtable.UniqueIndex).Get(ctx, &account,
		address,
	)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &account, nil
}

func (this accountTable) HasByPublicKey(ctx context.Context, public_key []byte) (found bool, err error) {
	return this.table.GetIndexByID(2).(ormtable.UniqueIndex).Has(ctx,
		public_key,
	)
}

func (this accountTable) GetByPublicKey(ctx context.Context, public_key []byte) (*Account, error) {
	var account Account
	found, err := this.table.GetIndexByID(2).(ormtable.UniqueIndex).Get(ctx, &account,
		public_key,
	)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &account, nil
}

func (this accountTable) List(ctx context.Context, prefixKey AccountIndexKey, opts ...ormlist.Option) (AccountIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return AccountIterator{it}, err
}

func (this accountTable) ListRange(ctx context.Context, from, to AccountIndexKey, opts ...ormlist.Option) (AccountIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return AccountIterator{it}, err
}

func (this accountTable) DeleteBy(ctx context.Context, prefixKey AccountIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this accountTable) DeleteRange(ctx context.Context, from, to AccountIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this accountTable) doNotImplement() {}

var _ AccountTable = accountTable{}

func NewAccountTable(db ormtable.Schema) (AccountTable, error) {
	table := db.GetTable(&Account{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&Account{}).ProtoReflect().Descriptor().FullName()))
	}
	return accountTable{table.(ormtable.AutoIncrementTable)}, nil
}

type CredentialTable interface {
	Insert(ctx context.Context, credential *Credential) error
	InsertReturningId(ctx context.Context, credential *Credential) (uint64, error)
	LastInsertedSequence(ctx context.Context) (uint64, error)
	Update(ctx context.Context, credential *Credential) error
	Save(ctx context.Context, credential *Credential) error
	Delete(ctx context.Context, credential *Credential) error
	Has(ctx context.Context, id uint64) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, id uint64) (*Credential, error)
	HasByOriginHandle(ctx context.Context, origin string, handle string) (found bool, err error)
	// GetByOriginHandle returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	GetByOriginHandle(ctx context.Context, origin string, handle string) (*Credential, error)
	HasByCredentialId(ctx context.Context, credential_id []byte) (found bool, err error)
	// GetByCredentialId returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	GetByCredentialId(ctx context.Context, credential_id []byte) (*Credential, error)
	HasByPublicKey(ctx context.Context, public_key []byte) (found bool, err error)
	// GetByPublicKey returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	GetByPublicKey(ctx context.Context, public_key []byte) (*Credential, error)
	List(ctx context.Context, prefixKey CredentialIndexKey, opts ...ormlist.Option) (CredentialIterator, error)
	ListRange(ctx context.Context, from, to CredentialIndexKey, opts ...ormlist.Option) (CredentialIterator, error)
	DeleteBy(ctx context.Context, prefixKey CredentialIndexKey) error
	DeleteRange(ctx context.Context, from, to CredentialIndexKey) error

	doNotImplement()
}

type CredentialIterator struct {
	ormtable.Iterator
}

func (i CredentialIterator) Value() (*Credential, error) {
	var credential Credential
	err := i.UnmarshalMessage(&credential)
	return &credential, err
}

type CredentialIndexKey interface {
	id() uint32
	values() []interface{}
	credentialIndexKey()
}

// primary key starting index..
type CredentialPrimaryKey = CredentialIdIndexKey

type CredentialIdIndexKey struct {
	vs []interface{}
}

func (x CredentialIdIndexKey) id() uint32            { return 0 }
func (x CredentialIdIndexKey) values() []interface{} { return x.vs }
func (x CredentialIdIndexKey) credentialIndexKey()   {}

func (this CredentialIdIndexKey) WithId(id uint64) CredentialIdIndexKey {
	this.vs = []interface{}{id}
	return this
}

type CredentialHandleIndexKey struct {
	vs []interface{}
}

func (x CredentialHandleIndexKey) id() uint32            { return 1 }
func (x CredentialHandleIndexKey) values() []interface{} { return x.vs }
func (x CredentialHandleIndexKey) credentialIndexKey()   {}

func (this CredentialHandleIndexKey) WithHandle(handle string) CredentialHandleIndexKey {
	this.vs = []interface{}{handle}
	return this
}

type CredentialOriginHandleIndexKey struct {
	vs []interface{}
}

func (x CredentialOriginHandleIndexKey) id() uint32            { return 2 }
func (x CredentialOriginHandleIndexKey) values() []interface{} { return x.vs }
func (x CredentialOriginHandleIndexKey) credentialIndexKey()   {}

func (this CredentialOriginHandleIndexKey) WithOrigin(origin string) CredentialOriginHandleIndexKey {
	this.vs = []interface{}{origin}
	return this
}

func (this CredentialOriginHandleIndexKey) WithOriginHandle(origin string, handle string) CredentialOriginHandleIndexKey {
	this.vs = []interface{}{origin, handle}
	return this
}

type CredentialCredentialIdIndexKey struct {
	vs []interface{}
}

func (x CredentialCredentialIdIndexKey) id() uint32            { return 3 }
func (x CredentialCredentialIdIndexKey) values() []interface{} { return x.vs }
func (x CredentialCredentialIdIndexKey) credentialIndexKey()   {}

func (this CredentialCredentialIdIndexKey) WithCredentialId(credential_id []byte) CredentialCredentialIdIndexKey {
	this.vs = []interface{}{credential_id}
	return this
}

type CredentialPublicKeyIndexKey struct {
	vs []interface{}
}

func (x CredentialPublicKeyIndexKey) id() uint32            { return 4 }
func (x CredentialPublicKeyIndexKey) values() []interface{} { return x.vs }
func (x CredentialPublicKeyIndexKey) credentialIndexKey()   {}

func (this CredentialPublicKeyIndexKey) WithPublicKey(public_key []byte) CredentialPublicKeyIndexKey {
	this.vs = []interface{}{public_key}
	return this
}

type credentialTable struct {
	table ormtable.AutoIncrementTable
}

func (this credentialTable) Insert(ctx context.Context, credential *Credential) error {
	return this.table.Insert(ctx, credential)
}

func (this credentialTable) Update(ctx context.Context, credential *Credential) error {
	return this.table.Update(ctx, credential)
}

func (this credentialTable) Save(ctx context.Context, credential *Credential) error {
	return this.table.Save(ctx, credential)
}

func (this credentialTable) Delete(ctx context.Context, credential *Credential) error {
	return this.table.Delete(ctx, credential)
}

func (this credentialTable) InsertReturningId(ctx context.Context, credential *Credential) (uint64, error) {
	return this.table.InsertReturningPKey(ctx, credential)
}

func (this credentialTable) LastInsertedSequence(ctx context.Context) (uint64, error) {
	return this.table.LastInsertedSequence(ctx)
}

func (this credentialTable) Has(ctx context.Context, id uint64) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, id)
}

func (this credentialTable) Get(ctx context.Context, id uint64) (*Credential, error) {
	var credential Credential
	found, err := this.table.PrimaryKey().Get(ctx, &credential, id)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &credential, nil
}

func (this credentialTable) HasByOriginHandle(ctx context.Context, origin string, handle string) (found bool, err error) {
	return this.table.GetIndexByID(2).(ormtable.UniqueIndex).Has(ctx,
		origin,
		handle,
	)
}

func (this credentialTable) GetByOriginHandle(ctx context.Context, origin string, handle string) (*Credential, error) {
	var credential Credential
	found, err := this.table.GetIndexByID(2).(ormtable.UniqueIndex).Get(ctx, &credential,
		origin,
		handle,
	)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &credential, nil
}

func (this credentialTable) HasByCredentialId(ctx context.Context, credential_id []byte) (found bool, err error) {
	return this.table.GetIndexByID(3).(ormtable.UniqueIndex).Has(ctx,
		credential_id,
	)
}

func (this credentialTable) GetByCredentialId(ctx context.Context, credential_id []byte) (*Credential, error) {
	var credential Credential
	found, err := this.table.GetIndexByID(3).(ormtable.UniqueIndex).Get(ctx, &credential,
		credential_id,
	)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &credential, nil
}

func (this credentialTable) HasByPublicKey(ctx context.Context, public_key []byte) (found bool, err error) {
	return this.table.GetIndexByID(4).(ormtable.UniqueIndex).Has(ctx,
		public_key,
	)
}

func (this credentialTable) GetByPublicKey(ctx context.Context, public_key []byte) (*Credential, error) {
	var credential Credential
	found, err := this.table.GetIndexByID(4).(ormtable.UniqueIndex).Get(ctx, &credential,
		public_key,
	)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &credential, nil
}

func (this credentialTable) List(ctx context.Context, prefixKey CredentialIndexKey, opts ...ormlist.Option) (CredentialIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return CredentialIterator{it}, err
}

func (this credentialTable) ListRange(ctx context.Context, from, to CredentialIndexKey, opts ...ormlist.Option) (CredentialIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return CredentialIterator{it}, err
}

func (this credentialTable) DeleteBy(ctx context.Context, prefixKey CredentialIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this credentialTable) DeleteRange(ctx context.Context, from, to CredentialIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this credentialTable) doNotImplement() {}

var _ CredentialTable = credentialTable{}

func NewCredentialTable(db ormtable.Schema) (CredentialTable, error) {
	table := db.GetTable(&Credential{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&Credential{}).ProtoReflect().Descriptor().FullName()))
	}
	return credentialTable{table.(ormtable.AutoIncrementTable)}, nil
}

type KeyshareTable interface {
	Insert(ctx context.Context, keyshare *Keyshare) error
	Update(ctx context.Context, keyshare *Keyshare) error
	Save(ctx context.Context, keyshare *Keyshare) error
	Delete(ctx context.Context, keyshare *Keyshare) error
	Has(ctx context.Context, did string) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, did string) (*Keyshare, error)
	List(ctx context.Context, prefixKey KeyshareIndexKey, opts ...ormlist.Option) (KeyshareIterator, error)
	ListRange(ctx context.Context, from, to KeyshareIndexKey, opts ...ormlist.Option) (KeyshareIterator, error)
	DeleteBy(ctx context.Context, prefixKey KeyshareIndexKey) error
	DeleteRange(ctx context.Context, from, to KeyshareIndexKey) error

	doNotImplement()
}

type KeyshareIterator struct {
	ormtable.Iterator
}

func (i KeyshareIterator) Value() (*Keyshare, error) {
	var keyshare Keyshare
	err := i.UnmarshalMessage(&keyshare)
	return &keyshare, err
}

type KeyshareIndexKey interface {
	id() uint32
	values() []interface{}
	keyshareIndexKey()
}

// primary key starting index..
type KeysharePrimaryKey = KeyshareDidIndexKey

type KeyshareDidIndexKey struct {
	vs []interface{}
}

func (x KeyshareDidIndexKey) id() uint32            { return 0 }
func (x KeyshareDidIndexKey) values() []interface{} { return x.vs }
func (x KeyshareDidIndexKey) keyshareIndexKey()     {}

func (this KeyshareDidIndexKey) WithDid(did string) KeyshareDidIndexKey {
	this.vs = []interface{}{did}
	return this
}

type keyshareTable struct {
	table ormtable.Table
}

func (this keyshareTable) Insert(ctx context.Context, keyshare *Keyshare) error {
	return this.table.Insert(ctx, keyshare)
}

func (this keyshareTable) Update(ctx context.Context, keyshare *Keyshare) error {
	return this.table.Update(ctx, keyshare)
}

func (this keyshareTable) Save(ctx context.Context, keyshare *Keyshare) error {
	return this.table.Save(ctx, keyshare)
}

func (this keyshareTable) Delete(ctx context.Context, keyshare *Keyshare) error {
	return this.table.Delete(ctx, keyshare)
}

func (this keyshareTable) Has(ctx context.Context, did string) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, did)
}

func (this keyshareTable) Get(ctx context.Context, did string) (*Keyshare, error) {
	var keyshare Keyshare
	found, err := this.table.PrimaryKey().Get(ctx, &keyshare, did)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &keyshare, nil
}

func (this keyshareTable) List(ctx context.Context, prefixKey KeyshareIndexKey, opts ...ormlist.Option) (KeyshareIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return KeyshareIterator{it}, err
}

func (this keyshareTable) ListRange(ctx context.Context, from, to KeyshareIndexKey, opts ...ormlist.Option) (KeyshareIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return KeyshareIterator{it}, err
}

func (this keyshareTable) DeleteBy(ctx context.Context, prefixKey KeyshareIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this keyshareTable) DeleteRange(ctx context.Context, from, to KeyshareIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this keyshareTable) doNotImplement() {}

var _ KeyshareTable = keyshareTable{}

func NewKeyshareTable(db ormtable.Schema) (KeyshareTable, error) {
	table := db.GetTable(&Keyshare{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&Keyshare{}).ProtoReflect().Descriptor().FullName()))
	}
	return keyshareTable{table}, nil
}

type IdentityTable interface {
	Insert(ctx context.Context, identity *Identity) error
	InsertReturningId(ctx context.Context, identity *Identity) (uint64, error)
	LastInsertedSequence(ctx context.Context) (uint64, error)
	Update(ctx context.Context, identity *Identity) error
	Save(ctx context.Context, identity *Identity) error
	Delete(ctx context.Context, identity *Identity) error
	Has(ctx context.Context, id uint64) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, id uint64) (*Identity, error)
	HasByAddressCoinType(ctx context.Context, address string, coin_type uint32) (found bool, err error)
	// GetByAddressCoinType returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	GetByAddressCoinType(ctx context.Context, address string, coin_type uint32) (*Identity, error)
	HasByPublicKeyKeyType(ctx context.Context, public_key []byte, key_type string) (found bool, err error)
	// GetByPublicKeyKeyType returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	GetByPublicKeyKeyType(ctx context.Context, public_key []byte, key_type string) (*Identity, error)
	List(ctx context.Context, prefixKey IdentityIndexKey, opts ...ormlist.Option) (IdentityIterator, error)
	ListRange(ctx context.Context, from, to IdentityIndexKey, opts ...ormlist.Option) (IdentityIterator, error)
	DeleteBy(ctx context.Context, prefixKey IdentityIndexKey) error
	DeleteRange(ctx context.Context, from, to IdentityIndexKey) error

	doNotImplement()
}

type IdentityIterator struct {
	ormtable.Iterator
}

func (i IdentityIterator) Value() (*Identity, error) {
	var identity Identity
	err := i.UnmarshalMessage(&identity)
	return &identity, err
}

type IdentityIndexKey interface {
	id() uint32
	values() []interface{}
	identityIndexKey()
}

// primary key starting index..
type IdentityPrimaryKey = IdentityIdIndexKey

type IdentityIdIndexKey struct {
	vs []interface{}
}

func (x IdentityIdIndexKey) id() uint32            { return 0 }
func (x IdentityIdIndexKey) values() []interface{} { return x.vs }
func (x IdentityIdIndexKey) identityIndexKey()     {}

func (this IdentityIdIndexKey) WithId(id uint64) IdentityIdIndexKey {
	this.vs = []interface{}{id}
	return this
}

type IdentityAddressCoinTypeIndexKey struct {
	vs []interface{}
}

func (x IdentityAddressCoinTypeIndexKey) id() uint32            { return 1 }
func (x IdentityAddressCoinTypeIndexKey) values() []interface{} { return x.vs }
func (x IdentityAddressCoinTypeIndexKey) identityIndexKey()     {}

func (this IdentityAddressCoinTypeIndexKey) WithAddress(address string) IdentityAddressCoinTypeIndexKey {
	this.vs = []interface{}{address}
	return this
}

func (this IdentityAddressCoinTypeIndexKey) WithAddressCoinType(address string, coin_type uint32) IdentityAddressCoinTypeIndexKey {
	this.vs = []interface{}{address, coin_type}
	return this
}

type IdentityPublicKeyKeyTypeIndexKey struct {
	vs []interface{}
}

func (x IdentityPublicKeyKeyTypeIndexKey) id() uint32            { return 2 }
func (x IdentityPublicKeyKeyTypeIndexKey) values() []interface{} { return x.vs }
func (x IdentityPublicKeyKeyTypeIndexKey) identityIndexKey()     {}

func (this IdentityPublicKeyKeyTypeIndexKey) WithPublicKey(public_key []byte) IdentityPublicKeyKeyTypeIndexKey {
	this.vs = []interface{}{public_key}
	return this
}

func (this IdentityPublicKeyKeyTypeIndexKey) WithPublicKeyKeyType(public_key []byte, key_type string) IdentityPublicKeyKeyTypeIndexKey {
	this.vs = []interface{}{public_key, key_type}
	return this
}

type identityTable struct {
	table ormtable.AutoIncrementTable
}

func (this identityTable) Insert(ctx context.Context, identity *Identity) error {
	return this.table.Insert(ctx, identity)
}

func (this identityTable) Update(ctx context.Context, identity *Identity) error {
	return this.table.Update(ctx, identity)
}

func (this identityTable) Save(ctx context.Context, identity *Identity) error {
	return this.table.Save(ctx, identity)
}

func (this identityTable) Delete(ctx context.Context, identity *Identity) error {
	return this.table.Delete(ctx, identity)
}

func (this identityTable) InsertReturningId(ctx context.Context, identity *Identity) (uint64, error) {
	return this.table.InsertReturningPKey(ctx, identity)
}

func (this identityTable) LastInsertedSequence(ctx context.Context) (uint64, error) {
	return this.table.LastInsertedSequence(ctx)
}

func (this identityTable) Has(ctx context.Context, id uint64) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, id)
}

func (this identityTable) Get(ctx context.Context, id uint64) (*Identity, error) {
	var identity Identity
	found, err := this.table.PrimaryKey().Get(ctx, &identity, id)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &identity, nil
}

func (this identityTable) HasByAddressCoinType(ctx context.Context, address string, coin_type uint32) (found bool, err error) {
	return this.table.GetIndexByID(1).(ormtable.UniqueIndex).Has(ctx,
		address,
		coin_type,
	)
}

func (this identityTable) GetByAddressCoinType(ctx context.Context, address string, coin_type uint32) (*Identity, error) {
	var identity Identity
	found, err := this.table.GetIndexByID(1).(ormtable.UniqueIndex).Get(ctx, &identity,
		address,
		coin_type,
	)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &identity, nil
}

func (this identityTable) HasByPublicKeyKeyType(ctx context.Context, public_key []byte, key_type string) (found bool, err error) {
	return this.table.GetIndexByID(2).(ormtable.UniqueIndex).Has(ctx,
		public_key,
		key_type,
	)
}

func (this identityTable) GetByPublicKeyKeyType(ctx context.Context, public_key []byte, key_type string) (*Identity, error) {
	var identity Identity
	found, err := this.table.GetIndexByID(2).(ormtable.UniqueIndex).Get(ctx, &identity,
		public_key,
		key_type,
	)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &identity, nil
}

func (this identityTable) List(ctx context.Context, prefixKey IdentityIndexKey, opts ...ormlist.Option) (IdentityIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return IdentityIterator{it}, err
}

func (this identityTable) ListRange(ctx context.Context, from, to IdentityIndexKey, opts ...ormlist.Option) (IdentityIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return IdentityIterator{it}, err
}

func (this identityTable) DeleteBy(ctx context.Context, prefixKey IdentityIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this identityTable) DeleteRange(ctx context.Context, from, to IdentityIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this identityTable) doNotImplement() {}

var _ IdentityTable = identityTable{}

func NewIdentityTable(db ormtable.Schema) (IdentityTable, error) {
	table := db.GetTable(&Identity{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&Identity{}).ProtoReflect().Descriptor().FullName()))
	}
	return identityTable{table.(ormtable.AutoIncrementTable)}, nil
}

type StateStore interface {
	AccountTable() AccountTable
	CredentialTable() CredentialTable
	KeyshareTable() KeyshareTable
	IdentityTable() IdentityTable

	doNotImplement()
}

type stateStore struct {
	account    AccountTable
	credential CredentialTable
	keyshare   KeyshareTable
	identity   IdentityTable
}

func (x stateStore) AccountTable() AccountTable {
	return x.account
}

func (x stateStore) CredentialTable() CredentialTable {
	return x.credential
}

func (x stateStore) KeyshareTable() KeyshareTable {
	return x.keyshare
}

func (x stateStore) IdentityTable() IdentityTable {
	return x.identity
}

func (stateStore) doNotImplement() {}

var _ StateStore = stateStore{}

func NewStateStore(db ormtable.Schema) (StateStore, error) {
	accountTable, err := NewAccountTable(db)
	if err != nil {
		return nil, err
	}

	credentialTable, err := NewCredentialTable(db)
	if err != nil {
		return nil, err
	}

	keyshareTable, err := NewKeyshareTable(db)
	if err != nil {
		return nil, err
	}

	identityTable, err := NewIdentityTable(db)
	if err != nil {
		return nil, err
	}

	return stateStore{
		accountTable,
		credentialTable,
		keyshareTable,
		identityTable,
	}, nil
}
