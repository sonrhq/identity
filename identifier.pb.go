// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sonrhq/identity/v1/identifier.proto

package identity

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// UserIdentifierType represents the type of a user identifier.
type UserIdentifierType int32

const (
	// The type of identifier is unknown.
	UserIdentifierType_USER_IDENTIFIER_TYPE_UNSPECIFIED UserIdentifierType = 0
	// The type of identifier is an email address.
	UserIdentifierType_USER_IDENTIFIER_TYPE_EMAIL UserIdentifierType = 1
	// The type of identifier is a phone number.
	UserIdentifierType_USER_IDENTIFIER_TYPE_PHONE UserIdentifierType = 2
	// The type of identifier is a FIDO credential ID.
	UserIdentifierType_USER_IDENTIFIER_TYPE_FIDO UserIdentifierType = 3
	// The type of a Passkey identifier.
	UserIdentifierType_USER_IDENTIFIER_TYPE_PASSKEY UserIdentifierType = 4
	// The type of a public key identifier.
	UserIdentifierType_USER_IDENTIFIER_TYPE_PUBLIC_KEY UserIdentifierType = 5
)

var UserIdentifierType_name = map[int32]string{
	0: "USER_IDENTIFIER_TYPE_UNSPECIFIED",
	1: "USER_IDENTIFIER_TYPE_EMAIL",
	2: "USER_IDENTIFIER_TYPE_PHONE",
	3: "USER_IDENTIFIER_TYPE_FIDO",
	4: "USER_IDENTIFIER_TYPE_PASSKEY",
	5: "USER_IDENTIFIER_TYPE_PUBLIC_KEY",
}

var UserIdentifierType_value = map[string]int32{
	"USER_IDENTIFIER_TYPE_UNSPECIFIED": 0,
	"USER_IDENTIFIER_TYPE_EMAIL":       1,
	"USER_IDENTIFIER_TYPE_PHONE":       2,
	"USER_IDENTIFIER_TYPE_FIDO":        3,
	"USER_IDENTIFIER_TYPE_PASSKEY":     4,
	"USER_IDENTIFIER_TYPE_PUBLIC_KEY":  5,
}

func (x UserIdentifierType) String() string {
	return proto.EnumName(UserIdentifierType_name, int32(x))
}

func (UserIdentifierType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_58ab6eac433b9067, []int{0}
}

// UserIdentifier represents the structure of a user identifier.
type UserIdentifier struct {
	// The type of identifier.
	IdentifierType UserIdentifierType `protobuf:"varint,1,opt,name=identifier_type,json=identifierType,proto3,enum=sonrhq.identity.v1.UserIdentifierType" json:"identifier_type,omitempty"`
	// The value of the identifier.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *UserIdentifier) Reset()         { *m = UserIdentifier{} }
func (m *UserIdentifier) String() string { return proto.CompactTextString(m) }
func (*UserIdentifier) ProtoMessage()    {}
func (*UserIdentifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_58ab6eac433b9067, []int{0}
}
func (m *UserIdentifier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserIdentifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserIdentifier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserIdentifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserIdentifier.Merge(m, src)
}
func (m *UserIdentifier) XXX_Size() int {
	return m.Size()
}
func (m *UserIdentifier) XXX_DiscardUnknown() {
	xxx_messageInfo_UserIdentifier.DiscardUnknown(m)
}

var xxx_messageInfo_UserIdentifier proto.InternalMessageInfo

func (m *UserIdentifier) GetIdentifierType() UserIdentifierType {
	if m != nil {
		return m.IdentifierType
	}
	return UserIdentifierType_USER_IDENTIFIER_TYPE_UNSPECIFIED
}

func (m *UserIdentifier) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// WalletIdentifier represents the structure of a wallet identifier.
type WalletIdentifier struct {
	// The bip44 coin type.
	CoinType uint32 `protobuf:"varint,1,opt,name=coin_type,json=coinType,proto3" json:"coin_type,omitempty"`
	// The value of the identifier is the address of the wallet.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *WalletIdentifier) Reset()         { *m = WalletIdentifier{} }
func (m *WalletIdentifier) String() string { return proto.CompactTextString(m) }
func (*WalletIdentifier) ProtoMessage()    {}
func (*WalletIdentifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_58ab6eac433b9067, []int{1}
}
func (m *WalletIdentifier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WalletIdentifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WalletIdentifier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WalletIdentifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WalletIdentifier.Merge(m, src)
}
func (m *WalletIdentifier) XXX_Size() int {
	return m.Size()
}
func (m *WalletIdentifier) XXX_DiscardUnknown() {
	xxx_messageInfo_WalletIdentifier.DiscardUnknown(m)
}

var xxx_messageInfo_WalletIdentifier proto.InternalMessageInfo

func (m *WalletIdentifier) GetCoinType() uint32 {
	if m != nil {
		return m.CoinType
	}
	return 0
}

func (m *WalletIdentifier) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterEnum("sonrhq.identity.v1.UserIdentifierType", UserIdentifierType_name, UserIdentifierType_value)
	proto.RegisterType((*UserIdentifier)(nil), "sonrhq.identity.v1.UserIdentifier")
	proto.RegisterType((*WalletIdentifier)(nil), "sonrhq.identity.v1.WalletIdentifier")
}

func init() {
	proto.RegisterFile("sonrhq/identity/v1/identifier.proto", fileDescriptor_58ab6eac433b9067)
}

var fileDescriptor_58ab6eac433b9067 = []byte{
	// 313 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2e, 0xce, 0xcf, 0x2b,
	0xca, 0x28, 0xd4, 0xcf, 0x4c, 0x49, 0xcd, 0x2b, 0xc9, 0x2c, 0xa9, 0xd4, 0x2f, 0x33, 0x84, 0xb2,
	0xd3, 0x32, 0x53, 0x8b, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x84, 0x20, 0x8a, 0xf4, 0x60,
	0x8a, 0xf4, 0xca, 0x0c, 0x95, 0xca, 0xb9, 0xf8, 0x42, 0x8b, 0x53, 0x8b, 0x3c, 0xe1, 0x6a, 0x85,
	0xfc, 0xb9, 0xf8, 0x11, 0x3a, 0xe3, 0x4b, 0x2a, 0x0b, 0x52, 0x25, 0x18, 0x15, 0x18, 0x35, 0xf8,
	0x8c, 0xd4, 0xf4, 0x30, 0xf5, 0xeb, 0xa1, 0x6a, 0x0e, 0xa9, 0x2c, 0x48, 0x0d, 0xe2, 0xcb, 0x44,
	0xe1, 0x0b, 0x89, 0x70, 0xb1, 0x96, 0x25, 0xe6, 0x94, 0xa6, 0x4a, 0x30, 0x29, 0x30, 0x6a, 0x70,
	0x06, 0x41, 0x38, 0x4a, 0xae, 0x5c, 0x02, 0xe1, 0x89, 0x39, 0x39, 0xa9, 0x25, 0x48, 0x56, 0x4b,
	0x73, 0x71, 0x26, 0xe7, 0x67, 0xe6, 0x21, 0x2c, 0xe5, 0x0d, 0xe2, 0x00, 0x09, 0xe0, 0x36, 0x46,
	0xeb, 0x01, 0x23, 0x97, 0x10, 0xa6, 0x1b, 0x84, 0x54, 0xb8, 0x14, 0x42, 0x83, 0x5d, 0x83, 0xe2,
	0x3d, 0x5d, 0x5c, 0xfd, 0x42, 0x3c, 0xdd, 0x3c, 0x5d, 0x83, 0xe2, 0x43, 0x22, 0x03, 0x5c, 0xe3,
	0x43, 0xfd, 0x82, 0x03, 0x5c, 0x9d, 0x41, 0x02, 0x2e, 0x02, 0x0c, 0x42, 0x72, 0x5c, 0x52, 0x58,
	0x55, 0xb9, 0xfa, 0x3a, 0x7a, 0xfa, 0x08, 0x30, 0xe2, 0x94, 0x0f, 0xf0, 0xf0, 0xf7, 0x73, 0x15,
	0x60, 0x12, 0x92, 0xe5, 0x92, 0xc4, 0x2a, 0xef, 0xe6, 0xe9, 0xe2, 0x2f, 0xc0, 0x2c, 0xa4, 0xc0,
	0x25, 0x83, 0x5d, 0xbb, 0x63, 0x70, 0xb0, 0xb7, 0x6b, 0xa4, 0x00, 0x8b, 0x90, 0x32, 0x97, 0x3c,
	0x76, 0x15, 0xa1, 0x4e, 0x3e, 0x9e, 0xce, 0xf1, 0x20, 0x45, 0xac, 0x4e, 0x26, 0x27, 0x1e, 0xc9,
	0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e,
	0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x10, 0x25, 0x95, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97,
	0x9c, 0x9f, 0xab, 0x8f, 0x96, 0x00, 0x92, 0xd8, 0xc0, 0x71, 0x6e, 0x0c, 0x08, 0x00, 0x00, 0xff,
	0xff, 0x74, 0xdb, 0xc3, 0x20, 0x1a, 0x02, 0x00, 0x00,
}

func (m *UserIdentifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserIdentifier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserIdentifier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintIdentifier(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.IdentifierType != 0 {
		i = encodeVarintIdentifier(dAtA, i, uint64(m.IdentifierType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WalletIdentifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WalletIdentifier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WalletIdentifier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintIdentifier(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.CoinType != 0 {
		i = encodeVarintIdentifier(dAtA, i, uint64(m.CoinType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintIdentifier(dAtA []byte, offset int, v uint64) int {
	offset -= sovIdentifier(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserIdentifier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IdentifierType != 0 {
		n += 1 + sovIdentifier(uint64(m.IdentifierType))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovIdentifier(uint64(l))
	}
	return n
}

func (m *WalletIdentifier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CoinType != 0 {
		n += 1 + sovIdentifier(uint64(m.CoinType))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovIdentifier(uint64(l))
	}
	return n
}

func sovIdentifier(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIdentifier(x uint64) (n int) {
	return sovIdentifier(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserIdentifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentifier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserIdentifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserIdentifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentifierType", wireType)
			}
			m.IdentifierType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentifier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdentifierType |= UserIdentifierType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentifier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentifier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdentifier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentifier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIdentifier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WalletIdentifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentifier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WalletIdentifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WalletIdentifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinType", wireType)
			}
			m.CoinType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentifier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentifier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentifier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdentifier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentifier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIdentifier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIdentifier(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIdentifier
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIdentifier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIdentifier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIdentifier
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIdentifier
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIdentifier
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIdentifier        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIdentifier          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIdentifier = fmt.Errorf("proto: unexpected end of group")
)
