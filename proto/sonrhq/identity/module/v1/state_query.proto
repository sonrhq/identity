// Code generated by protoc-gen-go-cosmos-orm-proto. DO NOT EDIT.
syntax = "proto3";
package sonrhq.identity.module.v1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "sonrhq/identity/module/v1/state.proto";

// StateQueryService queries the state of the tables specified by sonrhq/identity/module/v1/state.proto.
service StateQueryService {
  // Get queries the Account table by its primary key.
  rpc GetAccount(GetAccountRequest) returns (GetAccountResponse) {}
  // GetAccountByAddress queries the Account table by its Address index
  rpc GetAccountByAddress(GetAccountByAddressRequest) returns (GetAccountByAddressResponse) {}
  // GetAccountByPublicKey queries the Account table by its PublicKey index
  rpc GetAccountByPublicKey(GetAccountByPublicKeyRequest) returns (GetAccountByPublicKeyResponse) {}
  // ListAccount queries the Account table using prefix and range queries against defined indexes.
  rpc ListAccount(ListAccountRequest) returns (ListAccountResponse) {}
  // Get queries the Credential table by its primary key.
  rpc GetCredential(GetCredentialRequest) returns (GetCredentialResponse) {}
  // GetCredentialByOriginHandle queries the Credential table by its OriginHandle index
  rpc GetCredentialByOriginHandle(GetCredentialByOriginHandleRequest) returns (GetCredentialByOriginHandleResponse) {}
  // GetCredentialByCredentialId queries the Credential table by its CredentialId index
  rpc GetCredentialByCredentialId(GetCredentialByCredentialIdRequest) returns (GetCredentialByCredentialIdResponse) {}
  // GetCredentialByPublicKey queries the Credential table by its PublicKey index
  rpc GetCredentialByPublicKey(GetCredentialByPublicKeyRequest) returns (GetCredentialByPublicKeyResponse) {}
  // ListCredential queries the Credential table using prefix and range queries against defined indexes.
  rpc ListCredential(ListCredentialRequest) returns (ListCredentialResponse) {}
  // Get queries the Interchain table by its primary key.
  rpc GetInterchain(GetInterchainRequest) returns (GetInterchainResponse) {}
  // GetInterchainByChainId queries the Interchain table by its ChainId index
  rpc GetInterchainByChainId(GetInterchainByChainIdRequest) returns (GetInterchainByChainIdResponse) {}
  // GetInterchainByChainCode queries the Interchain table by its ChainCode index
  rpc GetInterchainByChainCode(GetInterchainByChainCodeRequest) returns (GetInterchainByChainCodeResponse) {}
  // GetInterchainByName queries the Interchain table by its Name index
  rpc GetInterchainByName(GetInterchainByNameRequest) returns (GetInterchainByNameResponse) {}
  // ListInterchain queries the Interchain table using prefix and range queries against defined indexes.
  rpc ListInterchain(ListInterchainRequest) returns (ListInterchainResponse) {}
}

// GetAccountRequest is the StateQuery/GetAccountRequest request type.
message GetAccountRequest {
  // index specifies the value of the index field in the primary key.
  uint64 index = 1;
}

// GetAccountResponse is the StateQuery/GetAccountResponse response type.
message GetAccountResponse {
  // value is the response value.
  Account value = 1;
}

// GetAccountByAddressRequest is the StateQuery/GetAccountByAddressRequest request type.
message GetAccountByAddressRequest {
  string address = 1;
}

// GetAccountByAddressResponse is the StateQuery/GetAccountByAddressResponse response type.
message GetAccountByAddressResponse {
  Account value = 1;
}

// GetAccountByPublicKeyRequest is the StateQuery/GetAccountByPublicKeyRequest request type.
message GetAccountByPublicKeyRequest {
  bytes public_key = 1;
}

// GetAccountByPublicKeyResponse is the StateQuery/GetAccountByPublicKeyResponse response type.
message GetAccountByPublicKeyResponse {
  Account value = 1;
}

// ListAccountRequest is the StateQuery/ListAccountRequest request type.
message ListAccountRequest {
  // IndexKey specifies the value of an index key to use in prefix and range queries.
  message IndexKey {
    // key specifies the index key value.
    oneof key {
      // index specifies the value of the Index index key to use in the query.
      Index index = 1;
      // address specifies the value of the Address index key to use in the query.
      Address address = 2;
      // public_key specifies the value of the PublicKey index key to use in the query.
      PublicKey public_key = 3;
    }
    
    message Index {
      // index is the value of the index field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional uint64 index = 1;
    }
    
    message Address {
      // address is the value of the address field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional string address = 1;
    }
    
    message PublicKey {
      // public_key is the value of the public_key field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional bytes public_key = 1;
    }
  }
  
  // query specifies the type of query - either a prefix or range query.
  oneof query {
    // prefix_query specifies the index key value to use for the prefix query.
    IndexKey prefix_query = 1;
    // range_query specifies the index key from/to values to use for the range query.
    RangeQuery range_query = 2;
  }
  // pagination specifies optional pagination parameters.
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
  
  // RangeQuery specifies the from/to index keys for a range query.
  message RangeQuery {
    // from is the index key to use for the start of the range query.
    // To query from the start of an index, specify an index key for that index with empty values.
    IndexKey from = 1;
    // to is the index key to use for the end of the range query.
    // The index key type MUST be the same as the index key type used for from.
    // To query from to the end of an index it can be omitted.
    IndexKey to = 2;
  }
}

// ListAccountResponse is the StateQuery/ListAccountResponse response type.
message ListAccountResponse {
  // values are the results of the query.
  repeated Account values = 1;
  // pagination is the pagination response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// GetCredentialRequest is the StateQuery/GetCredentialRequest request type.
message GetCredentialRequest {
  // id specifies the value of the id field in the primary key.
  uint64 id = 1;
}

// GetCredentialResponse is the StateQuery/GetCredentialResponse response type.
message GetCredentialResponse {
  // value is the response value.
  Credential value = 1;
}

// GetCredentialByOriginHandleRequest is the StateQuery/GetCredentialByOriginHandleRequest request type.
message GetCredentialByOriginHandleRequest {
  string origin = 1;
  string handle = 2;
}

// GetCredentialByOriginHandleResponse is the StateQuery/GetCredentialByOriginHandleResponse response type.
message GetCredentialByOriginHandleResponse {
  Credential value = 1;
}

// GetCredentialByCredentialIdRequest is the StateQuery/GetCredentialByCredentialIdRequest request type.
message GetCredentialByCredentialIdRequest {
  bytes credential_id = 1;
}

// GetCredentialByCredentialIdResponse is the StateQuery/GetCredentialByCredentialIdResponse response type.
message GetCredentialByCredentialIdResponse {
  Credential value = 1;
}

// GetCredentialByPublicKeyRequest is the StateQuery/GetCredentialByPublicKeyRequest request type.
message GetCredentialByPublicKeyRequest {
  bytes public_key = 1;
}

// GetCredentialByPublicKeyResponse is the StateQuery/GetCredentialByPublicKeyResponse response type.
message GetCredentialByPublicKeyResponse {
  Credential value = 1;
}

// ListCredentialRequest is the StateQuery/ListCredentialRequest request type.
message ListCredentialRequest {
  // IndexKey specifies the value of an index key to use in prefix and range queries.
  message IndexKey {
    // key specifies the index key value.
    oneof key {
      // id specifies the value of the Id index key to use in the query.
      Id id = 1;
      // handle specifies the value of the Handle index key to use in the query.
      Handle handle = 2;
      // origin_handle specifies the value of the OriginHandle index key to use in the query.
      OriginHandle origin_handle = 3;
      // credential_id specifies the value of the CredentialId index key to use in the query.
      CredentialId credential_id = 4;
      // public_key specifies the value of the PublicKey index key to use in the query.
      PublicKey public_key = 5;
    }
    
    message Id {
      // id is the value of the id field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional uint64 id = 1;
    }
    
    message Handle {
      // handle is the value of the handle field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional string handle = 1;
    }
    
    message OriginHandle {
      // origin is the value of the origin field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional string origin = 1;
      // handle is the value of the handle field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional string handle = 2;
    }
    
    message CredentialId {
      // credential_id is the value of the credential_id field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional bytes credential_id = 1;
    }
    
    message PublicKey {
      // public_key is the value of the public_key field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional bytes public_key = 1;
    }
  }
  
  // query specifies the type of query - either a prefix or range query.
  oneof query {
    // prefix_query specifies the index key value to use for the prefix query.
    IndexKey prefix_query = 1;
    // range_query specifies the index key from/to values to use for the range query.
    RangeQuery range_query = 2;
  }
  // pagination specifies optional pagination parameters.
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
  
  // RangeQuery specifies the from/to index keys for a range query.
  message RangeQuery {
    // from is the index key to use for the start of the range query.
    // To query from the start of an index, specify an index key for that index with empty values.
    IndexKey from = 1;
    // to is the index key to use for the end of the range query.
    // The index key type MUST be the same as the index key type used for from.
    // To query from to the end of an index it can be omitted.
    IndexKey to = 2;
  }
}

// ListCredentialResponse is the StateQuery/ListCredentialResponse response type.
message ListCredentialResponse {
  // values are the results of the query.
  repeated Credential values = 1;
  // pagination is the pagination response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// GetInterchainRequest is the StateQuery/GetInterchainRequest request type.
message GetInterchainRequest {
  // index specifies the value of the index field in the primary key.
  uint64 index = 1;
}

// GetInterchainResponse is the StateQuery/GetInterchainResponse response type.
message GetInterchainResponse {
  // value is the response value.
  Interchain value = 1;
}

// GetInterchainByChainIdRequest is the StateQuery/GetInterchainByChainIdRequest request type.
message GetInterchainByChainIdRequest {
  string chain_id = 1;
}

// GetInterchainByChainIdResponse is the StateQuery/GetInterchainByChainIdResponse response type.
message GetInterchainByChainIdResponse {
  Interchain value = 1;
}

// GetInterchainByChainCodeRequest is the StateQuery/GetInterchainByChainCodeRequest request type.
message GetInterchainByChainCodeRequest {
  uint32 chain_code = 1;
}

// GetInterchainByChainCodeResponse is the StateQuery/GetInterchainByChainCodeResponse response type.
message GetInterchainByChainCodeResponse {
  Interchain value = 1;
}

// GetInterchainByNameRequest is the StateQuery/GetInterchainByNameRequest request type.
message GetInterchainByNameRequest {
  string name = 1;
}

// GetInterchainByNameResponse is the StateQuery/GetInterchainByNameResponse response type.
message GetInterchainByNameResponse {
  Interchain value = 1;
}

// ListInterchainRequest is the StateQuery/ListInterchainRequest request type.
message ListInterchainRequest {
  // IndexKey specifies the value of an index key to use in prefix and range queries.
  message IndexKey {
    // key specifies the index key value.
    oneof key {
      // index specifies the value of the Index index key to use in the query.
      Index index = 1;
      // chain_id specifies the value of the ChainId index key to use in the query.
      ChainId chain_id = 2;
      // chain_code specifies the value of the ChainCode index key to use in the query.
      ChainCode chain_code = 3;
      // name specifies the value of the Name index key to use in the query.
      Name name = 4;
    }
    
    message Index {
      // index is the value of the index field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional uint64 index = 1;
    }
    
    message ChainId {
      // chain_id is the value of the chain_id field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional string chain_id = 1;
    }
    
    message ChainCode {
      // chain_code is the value of the chain_code field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional uint32 chain_code = 1;
    }
    
    message Name {
      // name is the value of the name field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional string name = 1;
    }
  }
  
  // query specifies the type of query - either a prefix or range query.
  oneof query {
    // prefix_query specifies the index key value to use for the prefix query.
    IndexKey prefix_query = 1;
    // range_query specifies the index key from/to values to use for the range query.
    RangeQuery range_query = 2;
  }
  // pagination specifies optional pagination parameters.
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
  
  // RangeQuery specifies the from/to index keys for a range query.
  message RangeQuery {
    // from is the index key to use for the start of the range query.
    // To query from the start of an index, specify an index key for that index with empty values.
    IndexKey from = 1;
    // to is the index key to use for the end of the range query.
    // The index key type MUST be the same as the index key type used for from.
    // To query from to the end of an index it can be omitted.
    IndexKey to = 2;
  }
}

// ListInterchainResponse is the StateQuery/ListInterchainResponse response type.
message ListInterchainResponse {
  // values are the results of the query.
  repeated Interchain values = 1;
  // pagination is the pagination response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

