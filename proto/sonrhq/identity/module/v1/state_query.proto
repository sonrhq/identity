// Code generated by protoc-gen-go-cosmos-orm-proto. DO NOT EDIT.
syntax = "proto3";
package sonrhq.identity.module.v1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "sonrhq/identity/module/v1/state.proto";

// StateQueryService queries the state of the tables specified by sonrhq/identity/module/v1/state.proto.
service StateQueryService {
  // Get queries the Account table by its primary key.
  rpc GetAccount(GetAccountRequest) returns (GetAccountResponse) {}
  // ListAccount queries the Account table using prefix and range queries against defined indexes.
  rpc ListAccount(ListAccountRequest) returns (ListAccountResponse) {}
  // Get queries the Credential table by its primary key.
  rpc GetCredential(GetCredentialRequest) returns (GetCredentialResponse) {}
  // ListCredential queries the Credential table using prefix and range queries against defined indexes.
  rpc ListCredential(ListCredentialRequest) returns (ListCredentialResponse) {}
  // Get queries the Persona table by its primary key.
  rpc GetPersona(GetPersonaRequest) returns (GetPersonaResponse) {}
  // ListPersona queries the Persona table using prefix and range queries against defined indexes.
  rpc ListPersona(ListPersonaRequest) returns (ListPersonaResponse) {}
  // Get queries the Keyshare table by its primary key.
  rpc GetKeyshare(GetKeyshareRequest) returns (GetKeyshareResponse) {}
  // ListKeyshare queries the Keyshare table using prefix and range queries against defined indexes.
  rpc ListKeyshare(ListKeyshareRequest) returns (ListKeyshareResponse) {}
  // Get queries the Identity table by its primary key.
  rpc GetIdentity(GetIdentityRequest) returns (GetIdentityResponse) {}
  // GetIdentityByAddressCoinType queries the Identity table by its AddressCoinType index
  rpc GetIdentityByAddressCoinType(GetIdentityByAddressCoinTypeRequest) returns (GetIdentityByAddressCoinTypeResponse) {}
  // GetIdentityByPublicKeyKeyType queries the Identity table by its PublicKeyKeyType index
  rpc GetIdentityByPublicKeyKeyType(GetIdentityByPublicKeyKeyTypeRequest) returns (GetIdentityByPublicKeyKeyTypeResponse) {}
  // ListIdentity queries the Identity table using prefix and range queries against defined indexes.
  rpc ListIdentity(ListIdentityRequest) returns (ListIdentityResponse) {}
}

// GetAccountRequest is the StateQuery/GetAccountRequest request type.
message GetAccountRequest {
  // address specifies the value of the address field in the primary key.
  string address = 1;
}

// GetAccountResponse is the StateQuery/GetAccountResponse response type.
message GetAccountResponse {
  // value is the response value.
  Account value = 1;
}

// ListAccountRequest is the StateQuery/ListAccountRequest request type.
message ListAccountRequest {
  // IndexKey specifies the value of an index key to use in prefix and range queries.
  message IndexKey {
    // key specifies the index key value.
    oneof key {
      // address specifies the value of the Address index key to use in the query.
      Address address = 1;
    }

    // Address specifies the value of the Address index key to use in the query.
    message Address {
      // address is the value of the address field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional string address = 1;
    }
  }

  // query specifies the type of query - either a prefix or range query.
  oneof query {
    // prefix_query specifies the index key value to use for the prefix query.
    IndexKey prefix_query = 1;
    // range_query specifies the index key from/to values to use for the range query.
    RangeQuery range_query = 2;
  }
  // pagination specifies optional pagination parameters.
  cosmos.base.query.v1beta1.PageRequest pagination = 3;

  // RangeQuery specifies the from/to index keys for a range query.
  message RangeQuery {
    // from is the index key to use for the start of the range query.
    // To query from the start of an index, specify an index key for that index with empty values.
    IndexKey from = 1;
    // to is the index key to use for the end of the range query.
    // The index key type MUST be the same as the index key type used for from.
    // To query from to the end of an index it can be omitted.
    IndexKey to = 2;
  }
}

// ListAccountResponse is the StateQuery/ListAccountResponse response type.
message ListAccountResponse {
  // values are the results of the query.
  repeated Account values = 1;
  // pagination is the pagination response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// GetCredentialRequest is the StateQuery/GetCredentialRequest request type.
message GetCredentialRequest {
  // did specifies the value of the did field in the primary key.
  string did = 1;
}

// GetCredentialResponse is the StateQuery/GetCredentialResponse response type.
message GetCredentialResponse {
  // value is the response value.
  Credential value = 1;
}

// ListCredentialRequest is the StateQuery/ListCredentialRequest request type.
message ListCredentialRequest {
  // IndexKey specifies the value of an index key to use in prefix and range queries.
  message IndexKey {
    // key specifies the index key value.
    oneof key {
      // did specifies the value of the Did index key to use in the query.
      Did did = 1;
    }

    // Did specifies the value of the Did index key to use in the query.
    message Did {
      // did is the value of the did field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional string did = 1;
    }
  }

  // query specifies the type of query - either a prefix or range query.
  oneof query {
    // prefix_query specifies the index key value to use for the prefix query.
    IndexKey prefix_query = 1;
    // range_query specifies the index key from/to values to use for the range query.
    RangeQuery range_query = 2;
  }
  // pagination specifies optional pagination parameters.
  cosmos.base.query.v1beta1.PageRequest pagination = 3;

  // RangeQuery specifies the from/to index keys for a range query.
  message RangeQuery {
    // from is the index key to use for the start of the range query.
    // To query from the start of an index, specify an index key for that index with empty values.
    IndexKey from = 1;
    // to is the index key to use for the end of the range query.
    // The index key type MUST be the same as the index key type used for from.
    // To query from to the end of an index it can be omitted.
    IndexKey to = 2;
  }
}

// ListCredentialResponse is the StateQuery/ListCredentialResponse response type.
message ListCredentialResponse {
  // values are the results of the query.
  repeated Credential values = 1;
  // pagination is the pagination response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// GetPersonaRequest is the StateQuery/GetPersonaRequest request type.
message GetPersonaRequest {
  // did specifies the value of the did field in the primary key.
  string did = 1;
}

// GetPersonaResponse is the StateQuery/GetPersonaResponse response type.
message GetPersonaResponse {
  // value is the response value.
  Persona value = 1;
}

// ListPersonaRequest is the StateQuery/ListPersonaRequest request type.
message ListPersonaRequest {
  // IndexKey specifies the value of an index key to use in prefix and range queries.
  message IndexKey {
    // key specifies the index key value.
    oneof key {
      // did specifies the value of the Did index key to use in the query.
      Did did = 1;
    }

    // Did specifies the value of the Did index key to use in the query.
    message Did {
      // did is the value of the did field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional string did = 1;
    }
  }

  // query specifies the type of query - either a prefix or range query.
  oneof query {
    // prefix_query specifies the index key value to use for the prefix query.
    IndexKey prefix_query = 1;
    // range_query specifies the index key from/to values to use for the range query.
    RangeQuery range_query = 2;
  }
  // pagination specifies optional pagination parameters.
  cosmos.base.query.v1beta1.PageRequest pagination = 3;

  // RangeQuery specifies the from/to index keys for a range query.
  message RangeQuery {
    // from is the index key to use for the start of the range query.
    // To query from the start of an index, specify an index key for that index with empty values.
    IndexKey from = 1;
    // to is the index key to use for the end of the range query.
    // The index key type MUST be the same as the index key type used for from.
    // To query from to the end of an index it can be omitted.
    IndexKey to = 2;
  }
}

// ListPersonaResponse is the StateQuery/ListPersonaResponse response type.
message ListPersonaResponse {
  // values are the results of the query.
  repeated Persona values = 1;
  // pagination is the pagination response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// GetKeyshareRequest is the StateQuery/GetKeyshareRequest request type.
message GetKeyshareRequest {
  // did specifies the value of the did field in the primary key.
  string did = 1;
}

// GetKeyshareResponse is the StateQuery/GetKeyshareResponse response type.
message GetKeyshareResponse {
  // value is the response value.
  Keyshare value = 1;
}

// ListKeyshareRequest is the StateQuery/ListKeyshareRequest request type.
message ListKeyshareRequest {
  // IndexKey specifies the value of an index key to use in prefix and range queries.
  message IndexKey {
    // key specifies the index key value.
    oneof key {
      // did specifies the value of the Did index key to use in the query.
      Did did = 1;
    }

    // Did specifies the value of the Did index key to use in the query.
    message Did {
      // did is the value of the did field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional string did = 1;
    }
  }

  // query specifies the type of query - either a prefix or range query.
  oneof query {
    // prefix_query specifies the index key value to use for the prefix query.
    IndexKey prefix_query = 1;
    // range_query specifies the index key from/to values to use for the range query.
    RangeQuery range_query = 2;
  }
  // pagination specifies optional pagination parameters.
  cosmos.base.query.v1beta1.PageRequest pagination = 3;

  // RangeQuery specifies the from/to index keys for a range query.
  message RangeQuery {
    // from is the index key to use for the start of the range query.
    // To query from the start of an index, specify an index key for that index with empty values.
    IndexKey from = 1;
    // to is the index key to use for the end of the range query.
    // The index key type MUST be the same as the index key type used for from.
    // To query from to the end of an index it can be omitted.
    IndexKey to = 2;
  }
}

// ListKeyshareResponse is the StateQuery/ListKeyshareResponse response type.
message ListKeyshareResponse {
  // values are the results of the query.
  repeated Keyshare values = 1;
  // pagination is the pagination response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// GetIdentityRequest is the StateQuery/GetIdentityRequest request type.
message GetIdentityRequest {
  // did specifies the value of the did field in the primary key.
  string did = 1;
}

// GetIdentityResponse is the StateQuery/GetIdentityResponse response type.
message GetIdentityResponse {
  // value is the response value.
  Identity value = 1;
}

// GetIdentityByAddressCoinTypeRequest is the StateQuery/GetIdentityByAddressCoinTypeRequest request type.
message GetIdentityByAddressCoinTypeRequest {
  string address = 1;
  uint32 coin_type = 2;
}

// GetIdentityByAddressCoinTypeResponse is the StateQuery/GetIdentityByAddressCoinTypeResponse response type.
message GetIdentityByAddressCoinTypeResponse {
  Identity value = 1;
}

// GetIdentityByPublicKeyKeyTypeRequest is the StateQuery/GetIdentityByPublicKeyKeyTypeRequest request type.
message GetIdentityByPublicKeyKeyTypeRequest {
  bytes public_key = 1;
  string key_type = 2;
}

// GetIdentityByPublicKeyKeyTypeResponse is the StateQuery/GetIdentityByPublicKeyKeyTypeResponse response type.
message GetIdentityByPublicKeyKeyTypeResponse {
  Identity value = 1;
}

// ListIdentityRequest is the StateQuery/ListIdentityRequest request type.
message ListIdentityRequest {
  // IndexKey specifies the value of an index key to use in prefix and range queries.
  message IndexKey {
    // key specifies the index key value.
    oneof key {
      // did specifies the value of the Did index key to use in the query.
      Did did = 1;
      // address_coin_type specifies the value of the AddressCoinType index key to use in the query.
      AddressCoinType address_coin_type = 2;
      // public_key_key_type specifies the value of the PublicKeyKeyType index key to use in the query.
      PublicKeyKeyType public_key_key_type = 3;
    }

    // Did specifies the value of the Did index key to use in the query.
    message Did {
      // did is the value of the did field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional string did = 1;
    }

    // AddressCoinType specifies the value of the AddressCoinType index key to use in the query.
    message AddressCoinType {
      // address is the value of the address field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional string address = 1;
      // coin_type is the value of the coin_type field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional uint32 coin_type = 2;
    }

    // PublicKeyKeyType specifies the value of the PublicKeyKeyType index key to use in the query.
    message PublicKeyKeyType {
      // public_key is the value of the public_key field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional bytes public_key = 1;
      // key_type is the value of the key_type field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional string key_type = 2;
    }
  }

  // query specifies the type of query - either a prefix or range query.
  oneof query {
    // prefix_query specifies the index key value to use for the prefix query.
    IndexKey prefix_query = 1;
    // range_query specifies the index key from/to values to use for the range query.
    RangeQuery range_query = 2;
  }
  // pagination specifies optional pagination parameters.
  cosmos.base.query.v1beta1.PageRequest pagination = 3;

  // RangeQuery specifies the from/to index keys for a range query.
  message RangeQuery {
    // from is the index key to use for the start of the range query.
    // To query from the start of an index, specify an index key for that index with empty values.
    IndexKey from = 1;
    // to is the index key to use for the end of the range query.
    // The index key type MUST be the same as the index key type used for from.
    // To query from to the end of an index it can be omitted.
    IndexKey to = 2;
  }
}

// ListIdentityResponse is the StateQuery/ListIdentityResponse response type.
message ListIdentityResponse {
  // values are the results of the query.
  repeated Identity values = 1;
  // pagination is the pagination response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

